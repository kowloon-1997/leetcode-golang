package dynamic

import "fmt"

/*
每次爬楼梯可以1或2次， 一共有n阶楼梯， 请问有多少种攀爬的方式


构思:
找规律： 到达第n阶的次数 = 到达第n-1 和 n-2的次数和有关， 于是乎可以推出 xn = xn-1 + xn-2
*/

func Palouti() {
	n := 10

	dp := make([]int64, n)

	//dp n = dp n-1 + dp n-2
	dp[0] = 1
	dp[1] = 1
	for i := 2; i < n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}
	fmt.Println(dp[n-1])
}

/**
 总结: 动态规划的基本原理

 1:将原问题猜分成 原问题+子问题
 2:确定状态， 某一阶段是什么含义。 比如此问题:i=第i阶的次数
 3:确定边界状态的值， 根据具体情况，可以需要前2个或者前3个
 4:写出状态转移方程
 5:coding

**/
